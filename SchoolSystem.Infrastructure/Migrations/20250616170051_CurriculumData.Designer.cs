// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSystem.Infrastructure;

#nullable disable

namespace SchoolSystem.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolLogContext))]
    [Migration("20250616170051_CurriculumData")]
    partial class CurriculumData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParentStudent", b =>
                {
                    b.Property<Guid>("ParentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParentsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ParentStudent");

                    b.HasData(
                        new
                        {
                            ParentsId = new Guid("8b5f7c12-0a97-4e45-9b34-123456789abc"),
                            StudentsId = new Guid("10101010-1010-1010-1010-101010101010")
                        },
                        new
                        {
                            ParentsId = new Guid("8b5f7c12-0a97-4e45-9b34-123456789abc"),
                            StudentsId = new Guid("20202020-2020-2020-2020-202020202020")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbsenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "A1",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b"),
                            Term = "Fall",
                            Year = 2025
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "B2",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b"),
                            Term = "Spring",
                            Year = 2025
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "C3",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b"),
                            Term = "Fall",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Curriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Curriculums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2b3c4d-1111-2222-3333-444455556666"),
                            ClassId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DayOfWeek = "Monday",
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            SubjectId = new Guid("a1b2c3d4-e5f6-4789-8abc-111111111111"),
                            TeacherId = new Guid("8f374d37-5a0c-4637-ba8e-2b4d2ceef15f")
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-2222-3333-4444-555566667777"),
                            ClassId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DayOfWeek = "Wednesday",
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            SubjectId = new Guid("a1b2c3d4-e5f6-4789-8abc-111111111111"),
                            TeacherId = new Guid("8f374d37-5a0c-4637-ba8e-2b4d2ceef15f")
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-3333-4444-5555-666677778888"),
                            ClassId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DayOfWeek = "Friday",
                            EndTime = new TimeSpan(0, 14, 30, 0, 0),
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            SubjectId = new Guid("b2c3d4e5-f6a7-589a-8bcd-222222222222"),
                            TeacherId = new Guid("2a3d47b0-28d1-48f9-bd9a-504a9f2a1cbd")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b5f7c12-0a97-4e45-9b34-123456789abc"),
                            PhoneNumber = "0888123456",
                            UserId = new Guid("3905cc60-cff6-4b59-b365-03d1749d9c7b")
                        },
                        new
                        {
                            Id = new Guid("9c6f8d23-1b07-4f56-ab45-23456789abcd"),
                            PhoneNumber = "0888234567",
                            UserId = new Guid("35ea475e-72e3-4786-8c66-c2586503171b")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Principal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Principals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aae52599-edf2-4b1d-8f89-51a76b689d25"),
                            PhoneNumber = "0888234567",
                            Specialization = "School Management",
                            UserId = new Guid("c7d81a30-6455-4a1f-8f47-923c1234abcd")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PrincipalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalId")
                        .IsUnique();

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b"),
                            Address = "456 West St, Townsville",
                            Name = "Westside Academy",
                            PrincipalId = new Guid("aae52599-edf2-4b1d-8f89-51a76b689d25")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10101010-1010-1010-1010-101010101010"),
                            ClassId = new Guid("33333333-3333-3333-3333-333333333333"),
                            UserId = new Guid("97c18abd-5743-4173-8f66-cd43363e55d5")
                        },
                        new
                        {
                            Id = new Guid("20202020-2020-2020-2020-202020202020"),
                            ClassId = new Guid("33333333-3333-3333-3333-333333333333"),
                            UserId = new Guid("bdcc8dcc-4d8e-4c97-a576-3aee878059c0")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4789-8abc-111111111111"),
                            Name = "Mathematics",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b")
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-589a-8bcd-222222222222"),
                            Name = "Physics",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b")
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-69ac-9bde-333333333333"),
                            Name = "Chemistry",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b")
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-7abd-aced-444444444444"),
                            Name = "History",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b")
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-8bde-afed-555555555555"),
                            Name = "Biology",
                            SchoolId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f374d37-5a0c-4637-ba8e-2b4d2ceef15f"),
                            Specialization = "Applied Mathematics",
                            UserId = new Guid("1396ac5f-745d-47b4-8cef-21a0e7e32bd9")
                        },
                        new
                        {
                            Id = new Guid("2a3d47b0-28d1-48f9-bd9a-504a9f2a1cbd"),
                            Specialization = "Theoretical Physics",
                            UserId = new Guid("7f74d5cd-5061-4e53-a10b-221cfb9488a0")
                        });
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("TeacherId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.Property<Guid>("SchoolsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeachersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchoolsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("SchoolTeacher");

                    b.HasData(
                        new
                        {
                            SchoolsId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b"),
                            TeachersId = new Guid("8f374d37-5a0c-4637-ba8e-2b4d2ceef15f")
                        },
                        new
                        {
                            SchoolsId = new Guid("b0cf0f90-50a5-4e86-9a29-fdf3928af26b"),
                            TeachersId = new Guid("2a3d47b0-28d1-48f9-bd9a-504a9f2a1cbd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParentStudent", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Attendance", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Class", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Curriculum", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Grade", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Parent", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Principal", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.School", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Principal", "Principal")
                        .WithOne("School")
                        .HasForeignKey("SchoolSystem.Infrastructure.Models.School", "PrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Student", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSystem.Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Subject", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.School", "School")
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Teacher", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Teacher", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.TeacherSubject", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolTeacher", b =>
                {
                    b.HasOne("SchoolSystem.Infrastructure.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSystem.Infrastructure.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Principal", b =>
                {
                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolSystem.Infrastructure.Models.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
